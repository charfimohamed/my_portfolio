{"ast":null,"code":"// src/data/fetchProjectsData.js\nimport axios from 'axios'; // GitHub username\n\nconst username = 'charfimohamed';\nconst token = \"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\"; // GitHub API endpoint for repositories\n\nconst apiEndpoint = `https://api.github.com/users/${username}/repos`;\n\nasync function fetchAllRepositories() {\n  try {\n    const response = await axios.get(apiEndpoint);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching repositories:', error);\n    return [];\n  }\n}\n\nasync function fetchReadme(repoName) {\n  try {\n    const readmeEndpoint = `https://api.github.com/repos/${username}/${repoName}/main/readme`;\n    console.log(readmeEndpoint);\n    const response = await axios.get(readmeEndpoint, {\n      headers: {\n        Accept: 'application/vnd.github.v3.raw'\n      } // To get the raw README content\n\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching README for ${repoName}:`, error);\n    return '';\n  }\n}\n\nfunction extractDemoLink(readmeContent) {\n  // Updated regex to avoid trailing punctuation\n  const urlRegex = /(https?:\\/\\/[^\\s\\)]+)/g;\n  const matches = readmeContent.match(urlRegex);\n  return matches ? matches[0] : null;\n}\n\nfunction createProjectEntry(id, repoData, demoLink) {\n  const imageUrl = `https://raw.githubusercontent.com/${username}/${repoData.name}/main/project-image.svg`; // Example image path\n  // log the image url to see if it is correct\n\n  console.log(imageUrl);\n  return {\n    id: id,\n    // Extract the project name and description from the repository data and change _ to space\n    projectName: repoData.name.replace(/_/g, ' '),\n    projectDesc: repoData.description || 'No description available.',\n    tags: [],\n    // Tags can be manually added or inferred based on project details\n    code: repoData.html_url,\n    demo: demoLink || repoData.html_url,\n    // Fallback to repo URL if no demo link found\n    image: imageUrl // Direct URL to the image in the repository\n\n  };\n}\n\nexport async function fetchProjectsData() {\n  const repositories = await fetchAllRepositories();\n  const projectsData = []; // Filter out repositories that contain the word 'github' in their name\n\n  const filteredRepositories = repositories.filter(repo => !repo.name.toLowerCase().includes('github'));\n\n  for (const [index, repo] of filteredRepositories.entries()) {\n    const readmeContent = await fetchReadme(repo.name);\n    const demoLink = extractDemoLink(readmeContent);\n    const projectEntry = createProjectEntry(index + 1, repo, demoLink);\n    projectsData.push(projectEntry);\n  }\n\n  return projectsData;\n}","map":{"version":3,"sources":["/Users/mohamedcharfi/Documents/projets personels/my_portfolio/src/data/projectsData.js"],"names":["axios","username","token","apiEndpoint","fetchAllRepositories","response","get","data","error","console","fetchReadme","repoName","readmeEndpoint","log","headers","Accept","extractDemoLink","readmeContent","urlRegex","matches","match","createProjectEntry","id","repoData","demoLink","imageUrl","name","projectName","replace","projectDesc","description","tags","code","html_url","demo","image","fetchProjectsData","repositories","projectsData","filteredRepositories","filter","repo","toLowerCase","includes","index","entries","projectEntry","push"],"mappings":"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","sourcesContent":["// src/data/fetchProjectsData.js\n\nimport axios from 'axios';\n\n// GitHub username\nconst username = 'charfimohamed';\nconst token =\"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\"\n\n// GitHub API endpoint for repositories\nconst apiEndpoint = `https://api.github.com/users/${username}/repos`;\n\nasync function fetchAllRepositories() {\n    try {\n        const response = await axios.get(apiEndpoint);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching repositories:', error);\n        return [];\n    }\n}\n\nasync function fetchReadme(repoName) {\n    try {\n        const readmeEndpoint = `https://api.github.com/repos/${username}/${repoName}/main/readme`;\n        console.log(readmeEndpoint);\n        const response = await axios.get(readmeEndpoint, {\n            headers: { Accept: 'application/vnd.github.v3.raw' } // To get the raw README content\n        });\n        return response.data;\n    } catch (error) {\n        console.error(`Error fetching README for ${repoName}:`, error);\n        return '';\n    }\n}\n\nfunction extractDemoLink(readmeContent) {\n    // Updated regex to avoid trailing punctuation\n    const urlRegex = /(https?:\\/\\/[^\\s\\)]+)/g;\n    const matches = readmeContent.match(urlRegex);\n    return matches ? matches[0] : null;\n}\n\n\nfunction createProjectEntry(id, repoData, demoLink) {\n    const imageUrl = `https://raw.githubusercontent.com/${username}/${repoData.name}/main/project-image.svg`; // Example image path\n    // log the image url to see if it is correct\n    console.log(imageUrl);\n    return {\n        id: id,\n        // Extract the project name and description from the repository data and change _ to space\n        projectName: repoData.name.replace(/_/g, ' '),\n        projectDesc: repoData.description || 'No description available.',\n        tags: [], // Tags can be manually added or inferred based on project details\n        code: repoData.html_url,\n        demo: demoLink || repoData.html_url, // Fallback to repo URL if no demo link found\n        image: imageUrl // Direct URL to the image in the repository\n    };\n}\n\nexport async function fetchProjectsData() {\n    const repositories = await fetchAllRepositories();\n    const projectsData = [];\n\n    // Filter out repositories that contain the word 'github' in their name\n    const filteredRepositories = repositories.filter(repo => !repo.name.toLowerCase().includes('github'));\n\n    for (const [index, repo] of filteredRepositories.entries()) {\n        const readmeContent = await fetchReadme(repo.name);\n        const demoLink = extractDemoLink(readmeContent);\n        const projectEntry = createProjectEntry(index + 1, repo, demoLink);\n        projectsData.push(projectEntry);\n    }\n\n    return projectsData;\n}\n"]},"metadata":{},"sourceType":"module"}