{"ast":null,"code":"// src/data/fetchProjectsData.js\nimport axios from 'axios'; // GitHub username\n\nconst username = 'charfimohamed'; // GitHub API endpoint for repositories\n\nconst apiEndpoint = `https://api.github.com/users/${username}/repos`;\n\nasync function fetchAllRepositories() {\n  try {\n    const response = await axios.get(apiEndpoint);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching repositories:', error);\n    return [];\n  }\n}\n\nasync function fetchReadme(repoName) {\n  try {\n    const readmeEndpoint = `https://api.github.com/repos/${username}/${repoName}/readme`;\n    const response = await axios.get(readmeEndpoint, {\n      headers: {\n        Accept: 'application/vnd.github.v3.raw'\n      } // To get the raw README content\n\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching README for ${repoName}:`, error);\n    return '';\n  }\n}\n\nfunction extractDemoLink(readmeContent) {\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  const matches = readmeContent.match(urlRegex);\n  return matches ? matches[0] : null;\n}\n\nfunction createProjectEntry(id, repoData, demoLink) {\n  const imageUrl = `https://raw.githubusercontent.com/${username}/${repoData.name}/main/assets/project-image.svg`; // Example image path\n\n  return {\n    id: id,\n    projectName: repoData.name,\n    projectDesc: repoData.description || 'No description available.',\n    tags: [],\n    // Tags can be manually added or inferred based on project details\n    code: repoData.html_url,\n    demo: demoLink || repoData.html_url,\n    // Fallback to repo URL if no demo link found\n    image: imageUrl // Direct URL to the image in the repository\n\n  };\n}\n\nexport async function fetchProjectsData() {\n  const repositories = await fetchAllRepositories();\n  const projectsData = [];\n\n  for (const [index, repo] of repositories.entries()) {\n    const readmeContent = await fetchReadme(repo.name);\n    const demoLink = extractDemoLink(readmeContent);\n    const projectEntry = createProjectEntry(index + 1, repo, demoLink);\n    projectsData.push(projectEntry);\n  }\n\n  return projectsData;\n}","map":{"version":3,"sources":["/Users/mohamedcharfi/Documents/projets personels/my_portfolio/src/data/projectsData.js"],"names":["axios","username","apiEndpoint","fetchAllRepositories","response","get","data","error","console","fetchReadme","repoName","readmeEndpoint","headers","Accept","extractDemoLink","readmeContent","urlRegex","matches","match","createProjectEntry","id","repoData","demoLink","imageUrl","name","projectName","projectDesc","description","tags","code","html_url","demo","image","fetchProjectsData","repositories","projectsData","index","repo","entries","projectEntry","push"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,eAAjB,C,CAEA;;AACA,MAAMC,WAAW,GAAI,gCAA+BD,QAAS,QAA7D;;AAEA,eAAeE,oBAAf,GAAsC;AAClC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAUH,WAAV,CAAvB;AACA,WAAOE,QAAQ,CAACE,IAAhB;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACA,WAAO,EAAP;AACH;AACJ;;AAED,eAAeE,WAAf,CAA2BC,QAA3B,EAAqC;AACjC,MAAI;AACA,UAAMC,cAAc,GAAI,gCAA+BV,QAAS,IAAGS,QAAS,SAA5E;AACA,UAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAUM,cAAV,EAA0B;AAC7CC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OADoC,CACQ;;AADR,KAA1B,CAAvB;AAGA,WAAOT,QAAQ,CAACE,IAAhB;AACH,GAND,CAME,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAe,6BAA4BG,QAAS,GAApD,EAAwDH,KAAxD;AACA,WAAO,EAAP;AACH;AACJ;;AAED,SAASO,eAAT,CAAyBC,aAAzB,EAAwC;AACpC,QAAMC,QAAQ,GAAG,sBAAjB;AACA,QAAMC,OAAO,GAAGF,aAAa,CAACG,KAAd,CAAoBF,QAApB,CAAhB;AACA,SAAOC,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgB,IAA9B;AACH;;AAED,SAASE,kBAAT,CAA4BC,EAA5B,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;AAChD,QAAMC,QAAQ,GAAI,qCAAoCtB,QAAS,IAAGoB,QAAQ,CAACG,IAAK,gCAAhF,CADgD,CACiE;;AACjH,SAAO;AACHJ,IAAAA,EAAE,EAAEA,EADD;AAEHK,IAAAA,WAAW,EAAEJ,QAAQ,CAACG,IAFnB;AAGHE,IAAAA,WAAW,EAAEL,QAAQ,CAACM,WAAT,IAAwB,2BAHlC;AAIHC,IAAAA,IAAI,EAAE,EAJH;AAIO;AACVC,IAAAA,IAAI,EAAER,QAAQ,CAACS,QALZ;AAMHC,IAAAA,IAAI,EAAET,QAAQ,IAAID,QAAQ,CAACS,QANxB;AAMkC;AACrCE,IAAAA,KAAK,EAAET,QAPJ,CAOa;;AAPb,GAAP;AASH;;AAED,OAAO,eAAeU,iBAAf,GAAmC;AACtC,QAAMC,YAAY,GAAG,MAAM/B,oBAAoB,EAA/C;AACA,QAAMgC,YAAY,GAAG,EAArB;;AAEA,OAAK,MAAM,CAACC,KAAD,EAAQC,IAAR,CAAX,IAA4BH,YAAY,CAACI,OAAb,EAA5B,EAAoD;AAChD,UAAMvB,aAAa,GAAG,MAAMN,WAAW,CAAC4B,IAAI,CAACb,IAAN,CAAvC;AACA,UAAMF,QAAQ,GAAGR,eAAe,CAACC,aAAD,CAAhC;AACA,UAAMwB,YAAY,GAAGpB,kBAAkB,CAACiB,KAAK,GAAG,CAAT,EAAYC,IAAZ,EAAkBf,QAAlB,CAAvC;AACAa,IAAAA,YAAY,CAACK,IAAb,CAAkBD,YAAlB;AACH;;AAED,SAAOJ,YAAP;AACH","sourcesContent":["// src/data/fetchProjectsData.js\n\nimport axios from 'axios';\n\n// GitHub username\nconst username = 'charfimohamed';\n\n// GitHub API endpoint for repositories\nconst apiEndpoint = `https://api.github.com/users/${username}/repos`;\n\nasync function fetchAllRepositories() {\n    try {\n        const response = await axios.get(apiEndpoint);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching repositories:', error);\n        return [];\n    }\n}\n\nasync function fetchReadme(repoName) {\n    try {\n        const readmeEndpoint = `https://api.github.com/repos/${username}/${repoName}/readme`;\n        const response = await axios.get(readmeEndpoint, {\n            headers: { Accept: 'application/vnd.github.v3.raw' } // To get the raw README content\n        });\n        return response.data;\n    } catch (error) {\n        console.error(`Error fetching README for ${repoName}:`, error);\n        return '';\n    }\n}\n\nfunction extractDemoLink(readmeContent) {\n    const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const matches = readmeContent.match(urlRegex);\n    return matches ? matches[0] : null;\n}\n\nfunction createProjectEntry(id, repoData, demoLink) {\n    const imageUrl = `https://raw.githubusercontent.com/${username}/${repoData.name}/main/assets/project-image.svg`; // Example image path\n    return {\n        id: id,\n        projectName: repoData.name,\n        projectDesc: repoData.description || 'No description available.',\n        tags: [], // Tags can be manually added or inferred based on project details\n        code: repoData.html_url,\n        demo: demoLink || repoData.html_url, // Fallback to repo URL if no demo link found\n        image: imageUrl // Direct URL to the image in the repository\n    };\n}\n\nexport async function fetchProjectsData() {\n    const repositories = await fetchAllRepositories();\n    const projectsData = [];\n\n    for (const [index, repo] of repositories.entries()) {\n        const readmeContent = await fetchReadme(repo.name);\n        const demoLink = extractDemoLink(readmeContent);\n        const projectEntry = createProjectEntry(index + 1, repo, demoLink);\n        projectsData.push(projectEntry);\n    }\n\n    return projectsData;\n}\n"]},"metadata":{},"sourceType":"module"}