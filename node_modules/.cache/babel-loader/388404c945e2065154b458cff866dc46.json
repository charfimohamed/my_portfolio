{"ast":null,"code":"import axios from 'axios';\nimport fs from 'fs';\nimport path from 'path'; // GitHub username\n\nconst username = 'charfimohamed';\nconst token = \"not going to share my token :)\"; // GitHub API endpoint for repositories\n\nconst apiEndpoint = `https://api.github.com/users/${username}/repos`;\n\nasync function fetchAllRepositories() {\n  try {\n    const response = await axios.get(apiEndpoint, {\n      headers: {\n        //                Authorization: `token ${token}`,\n        Accept: 'application/vnd.github.v3+json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching repositories:', error);\n    return [];\n  }\n}\n\nasync function fetchReadme(repoName) {\n  try {\n    const readmeEndpoint = `https://api.github.com/repos/${username}/${repoName}/readme`;\n    console.log(readmeEndpoint);\n    const response = await axios.get(readmeEndpoint, {\n      headers: {\n        //                Authorization: `token ${token}`,\n        Accept: 'application/vnd.github.v3.raw'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching README for ${repoName}:`, error);\n    return '';\n  }\n}\n\nfunction extractDemoLink(readmeContent) {\n  const urlRegex = /(https?:\\/\\/[^\\s\\)]+)/g;\n  const matches = readmeContent.match(urlRegex);\n  return matches ? matches[0] : null;\n}\n\nasync function createProjectEntry(id, repoData, demoLink) {\n  const imageUrl = `https://raw.githubusercontent.com/${username}/${repoData.name}/main/project-image.svg`; // Function to check if the image exists\n\n  async function imageExists(url) {\n    try {\n      const response = await axios.head(url);\n      return response.status === 200;\n    } catch (error) {\n      return false;\n    }\n  } // Check if the image exists, else get a random image\n\n\n  let finalImageUrl = imageUrl;\n\n  if (!(await imageExists(imageUrl))) {\n    // Get random SVG from the local folder\n    const svgFolderPath = path.join(__dirname, '../assets/svg/projects');\n    const svgFiles = fs.readdirSync(svgFolderPath).filter(file => file.endsWith('.svg')); // Select a random SVG file\n\n    if (svgFiles.length > 0) {\n      const randomSvg = svgFiles[Math.floor(Math.random() * svgFiles.length)];\n      finalImageUrl = path.join(svgFolderPath, randomSvg);\n    }\n  }\n\n  return {\n    id: id,\n    projectName: repoData.name.replace(/_/g, ' '),\n    projectDesc: repoData.description || 'No description available.',\n    tags: [],\n    code: repoData.html_url,\n    demo: demoLink || repoData.html_url,\n    image: finalImageUrl\n  };\n}\n\nexport async function fetchProjectsData() {\n  const repositories = await fetchAllRepositories();\n  const projectsData = [];\n  const filteredRepositories = repositories.filter(repo => !repo.name.toLowerCase().includes('github'));\n\n  for (const [index, repo] of filteredRepositories.entries()) {\n    const readmeContent = await fetchReadme(repo.name);\n    const demoLink = extractDemoLink(readmeContent);\n    const projectEntry = await createProjectEntry(index + 1, repo, demoLink);\n    projectsData.push(projectEntry);\n  } // Shuffle the projectsData array\n\n\n  for (let i = projectsData.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [projectsData[i], projectsData[j]] = [projectsData[j], projectsData[i]];\n  }\n\n  return projectsData;\n}","map":{"version":3,"sources":["/Users/mohamedcharfi/Documents/projets personels/my_portfolio/src/data/projectsData.js"],"names":["axios","fs","path","username","token","apiEndpoint","fetchAllRepositories","response","get","headers","Accept","data","error","console","fetchReadme","repoName","readmeEndpoint","log","extractDemoLink","readmeContent","urlRegex","matches","match","createProjectEntry","id","repoData","demoLink","imageUrl","name","imageExists","url","head","status","finalImageUrl","svgFolderPath","join","__dirname","svgFiles","readdirSync","filter","file","endsWith","length","randomSvg","Math","floor","random","projectName","replace","projectDesc","description","tags","code","html_url","demo","image","fetchProjectsData","repositories","projectsData","filteredRepositories","repo","toLowerCase","includes","index","entries","projectEntry","push","i","j"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport fs from 'fs';\nimport path from 'path';\n\n// GitHub username\nconst username = 'charfimohamed';\nconst token =\"not going to share my token :)\";\n\n// GitHub API endpoint for repositories\nconst apiEndpoint = `https://api.github.com/users/${username}/repos`;\n\nasync function fetchAllRepositories() {\n    try {\n        const response = await axios.get(apiEndpoint, {\n            headers: {\n//                Authorization: `token ${token}`,\n                Accept: 'application/vnd.github.v3+json'\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching repositories:', error);\n        return [];\n    }\n}\n\nasync function fetchReadme(repoName) {\n    try {\n        const readmeEndpoint = `https://api.github.com/repos/${username}/${repoName}/readme`;\n        console.log(readmeEndpoint);\n        const response = await axios.get(readmeEndpoint, {\n            headers: {\n//                Authorization: `token ${token}`,\n                Accept: 'application/vnd.github.v3.raw'\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error(`Error fetching README for ${repoName}:`, error);\n        return '';\n    }\n}\n\nfunction extractDemoLink(readmeContent) {\n    const urlRegex = /(https?:\\/\\/[^\\s\\)]+)/g;\n    const matches = readmeContent.match(urlRegex);\n    return matches ? matches[0] : null;\n}\n\nasync function createProjectEntry(id, repoData, demoLink) {\n    const imageUrl = `https://raw.githubusercontent.com/${username}/${repoData.name}/main/project-image.svg`;\n\n    // Function to check if the image exists\n    async function imageExists(url) {\n        try {\n            const response = await axios.head(url);\n            return response.status === 200;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    // Check if the image exists, else get a random image\n    let finalImageUrl = imageUrl;\n    if (!(await imageExists(imageUrl))) {\n        // Get random SVG from the local folder\n        const svgFolderPath = path.join(__dirname, '../assets/svg/projects');\n        const svgFiles = fs.readdirSync(svgFolderPath).filter(file => file.endsWith('.svg'));\n\n        // Select a random SVG file\n        if (svgFiles.length > 0) {\n            const randomSvg = svgFiles[Math.floor(Math.random() * svgFiles.length)];\n            finalImageUrl = path.join(svgFolderPath, randomSvg);\n        }\n    }\n\n    return {\n        id: id,\n        projectName: repoData.name.replace(/_/g, ' '),\n        projectDesc: repoData.description || 'No description available.',\n        tags: [],\n        code: repoData.html_url,\n        demo: demoLink || repoData.html_url,\n        image: finalImageUrl\n    };\n}\n\nexport async function fetchProjectsData() {\n    const repositories = await fetchAllRepositories();\n    const projectsData = [];\n\n    const filteredRepositories = repositories.filter(repo => !repo.name.toLowerCase().includes('github'));\n\n    for (const [index, repo] of filteredRepositories.entries()) {\n        const readmeContent = await fetchReadme(repo.name);\n        const demoLink = extractDemoLink(readmeContent);\n        const projectEntry = await createProjectEntry(index + 1, repo, demoLink);\n        projectsData.push(projectEntry);\n    }\n\n    // Shuffle the projectsData array\n    for (let i = projectsData.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [projectsData[i], projectsData[j]] = [projectsData[j], projectsData[i]];\n    }\n\n    return projectsData;\n}\n"]},"metadata":{},"sourceType":"module"}